// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/15/2025 22:19:29"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    relogio
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module relogio_vlg_sample_tst(
	clk,
	rst,
	sampler_tx
);
input  clk;
input  rst;
output sampler_tx;

reg sample;
time current_time;
always @(clk or rst)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module relogio_vlg_check_tst (
	bcd_h_dez,
	bcd_h_unid,
	bcd_m_dez,
	bcd_m_unid,
	bcd_s_dez,
	bcd_s_unid,
	sampler_rx
);
input [6:0] bcd_h_dez;
input [6:0] bcd_h_unid;
input [6:0] bcd_m_dez;
input [6:0] bcd_m_unid;
input [6:0] bcd_s_dez;
input [6:0] bcd_s_unid;
input sampler_rx;

reg [6:0] bcd_h_dez_expected;
reg [6:0] bcd_h_unid_expected;
reg [6:0] bcd_m_dez_expected;
reg [6:0] bcd_m_unid_expected;
reg [6:0] bcd_s_dez_expected;
reg [6:0] bcd_s_unid_expected;

reg [6:0] bcd_h_dez_prev;
reg [6:0] bcd_h_unid_prev;
reg [6:0] bcd_m_dez_prev;
reg [6:0] bcd_m_unid_prev;
reg [6:0] bcd_s_dez_prev;
reg [6:0] bcd_s_unid_prev;

reg [6:0] bcd_h_dez_expected_prev;
reg [6:0] bcd_h_unid_expected_prev;
reg [6:0] bcd_m_dez_expected_prev;
reg [6:0] bcd_m_unid_expected_prev;
reg [6:0] bcd_s_dez_expected_prev;
reg [6:0] bcd_s_unid_expected_prev;

reg [6:0] last_bcd_h_dez_exp;
reg [6:0] last_bcd_h_unid_exp;
reg [6:0] last_bcd_m_dez_exp;
reg [6:0] last_bcd_m_unid_exp;
reg [6:0] last_bcd_s_dez_exp;
reg [6:0] last_bcd_s_unid_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:6] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 6'b1;
end

// update real /o prevs

always @(trigger)
begin
	bcd_h_dez_prev = bcd_h_dez;
	bcd_h_unid_prev = bcd_h_unid;
	bcd_m_dez_prev = bcd_m_dez;
	bcd_m_unid_prev = bcd_m_unid;
	bcd_s_dez_prev = bcd_s_dez;
	bcd_s_unid_prev = bcd_s_unid;
end

// update expected /o prevs

always @(trigger)
begin
	bcd_h_dez_expected_prev = bcd_h_dez_expected;
	bcd_h_unid_expected_prev = bcd_h_unid_expected;
	bcd_m_dez_expected_prev = bcd_m_dez_expected;
	bcd_m_unid_expected_prev = bcd_m_unid_expected;
	bcd_s_dez_expected_prev = bcd_s_dez_expected;
	bcd_s_unid_expected_prev = bcd_s_unid_expected;
end


// expected bcd_h_dez[ 6 ]
initial
begin
	bcd_h_dez_expected[6] = 1'bX;
end 
// expected bcd_h_dez[ 5 ]
initial
begin
	bcd_h_dez_expected[5] = 1'bX;
end 
// expected bcd_h_dez[ 4 ]
initial
begin
	bcd_h_dez_expected[4] = 1'bX;
end 
// expected bcd_h_dez[ 3 ]
initial
begin
	bcd_h_dez_expected[3] = 1'bX;
end 
// expected bcd_h_dez[ 2 ]
initial
begin
	bcd_h_dez_expected[2] = 1'bX;
end 
// expected bcd_h_dez[ 1 ]
initial
begin
	bcd_h_dez_expected[1] = 1'bX;
end 
// expected bcd_h_dez[ 0 ]
initial
begin
	bcd_h_dez_expected[0] = 1'bX;
end 
// expected bcd_h_unid[ 6 ]
initial
begin
	bcd_h_unid_expected[6] = 1'bX;
end 
// expected bcd_h_unid[ 5 ]
initial
begin
	bcd_h_unid_expected[5] = 1'bX;
end 
// expected bcd_h_unid[ 4 ]
initial
begin
	bcd_h_unid_expected[4] = 1'bX;
end 
// expected bcd_h_unid[ 3 ]
initial
begin
	bcd_h_unid_expected[3] = 1'bX;
end 
// expected bcd_h_unid[ 2 ]
initial
begin
	bcd_h_unid_expected[2] = 1'bX;
end 
// expected bcd_h_unid[ 1 ]
initial
begin
	bcd_h_unid_expected[1] = 1'bX;
end 
// expected bcd_h_unid[ 0 ]
initial
begin
	bcd_h_unid_expected[0] = 1'bX;
end 
// expected bcd_m_dez[ 6 ]
initial
begin
	bcd_m_dez_expected[6] = 1'bX;
end 
// expected bcd_m_dez[ 5 ]
initial
begin
	bcd_m_dez_expected[5] = 1'bX;
end 
// expected bcd_m_dez[ 4 ]
initial
begin
	bcd_m_dez_expected[4] = 1'bX;
end 
// expected bcd_m_dez[ 3 ]
initial
begin
	bcd_m_dez_expected[3] = 1'bX;
end 
// expected bcd_m_dez[ 2 ]
initial
begin
	bcd_m_dez_expected[2] = 1'bX;
end 
// expected bcd_m_dez[ 1 ]
initial
begin
	bcd_m_dez_expected[1] = 1'bX;
end 
// expected bcd_m_dez[ 0 ]
initial
begin
	bcd_m_dez_expected[0] = 1'bX;
end 
// expected bcd_m_unid[ 6 ]
initial
begin
	bcd_m_unid_expected[6] = 1'bX;
end 
// expected bcd_m_unid[ 5 ]
initial
begin
	bcd_m_unid_expected[5] = 1'bX;
end 
// expected bcd_m_unid[ 4 ]
initial
begin
	bcd_m_unid_expected[4] = 1'bX;
end 
// expected bcd_m_unid[ 3 ]
initial
begin
	bcd_m_unid_expected[3] = 1'bX;
end 
// expected bcd_m_unid[ 2 ]
initial
begin
	bcd_m_unid_expected[2] = 1'bX;
end 
// expected bcd_m_unid[ 1 ]
initial
begin
	bcd_m_unid_expected[1] = 1'bX;
end 
// expected bcd_m_unid[ 0 ]
initial
begin
	bcd_m_unid_expected[0] = 1'bX;
end 
// expected bcd_s_dez[ 6 ]
initial
begin
	bcd_s_dez_expected[6] = 1'bX;
end 
// expected bcd_s_dez[ 5 ]
initial
begin
	bcd_s_dez_expected[5] = 1'bX;
end 
// expected bcd_s_dez[ 4 ]
initial
begin
	bcd_s_dez_expected[4] = 1'bX;
end 
// expected bcd_s_dez[ 3 ]
initial
begin
	bcd_s_dez_expected[3] = 1'bX;
end 
// expected bcd_s_dez[ 2 ]
initial
begin
	bcd_s_dez_expected[2] = 1'bX;
end 
// expected bcd_s_dez[ 1 ]
initial
begin
	bcd_s_dez_expected[1] = 1'bX;
end 
// expected bcd_s_dez[ 0 ]
initial
begin
	bcd_s_dez_expected[0] = 1'bX;
end 
// expected bcd_s_unid[ 6 ]
initial
begin
	bcd_s_unid_expected[6] = 1'bX;
end 
// expected bcd_s_unid[ 5 ]
initial
begin
	bcd_s_unid_expected[5] = 1'bX;
end 
// expected bcd_s_unid[ 4 ]
initial
begin
	bcd_s_unid_expected[4] = 1'bX;
end 
// expected bcd_s_unid[ 3 ]
initial
begin
	bcd_s_unid_expected[3] = 1'bX;
end 
// expected bcd_s_unid[ 2 ]
initial
begin
	bcd_s_unid_expected[2] = 1'bX;
end 
// expected bcd_s_unid[ 1 ]
initial
begin
	bcd_s_unid_expected[1] = 1'bX;
end 
// expected bcd_s_unid[ 0 ]
initial
begin
	bcd_s_unid_expected[0] = 1'bX;
end 
// generate trigger
always @(bcd_h_dez_expected or bcd_h_dez or bcd_h_unid_expected or bcd_h_unid or bcd_m_dez_expected or bcd_m_dez or bcd_m_unid_expected or bcd_m_unid or bcd_s_dez_expected or bcd_s_dez or bcd_s_unid_expected or bcd_s_unid)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected bcd_h_dez = %b | expected bcd_h_unid = %b | expected bcd_m_dez = %b | expected bcd_m_unid = %b | expected bcd_s_dez = %b | expected bcd_s_unid = %b | ",bcd_h_dez_expected_prev,bcd_h_unid_expected_prev,bcd_m_dez_expected_prev,bcd_m_unid_expected_prev,bcd_s_dez_expected_prev,bcd_s_unid_expected_prev);
	$display("| real bcd_h_dez = %b | real bcd_h_unid = %b | real bcd_m_dez = %b | real bcd_m_unid = %b | real bcd_s_dez = %b | real bcd_s_unid = %b | ",bcd_h_dez_prev,bcd_h_unid_prev,bcd_m_dez_prev,bcd_m_unid_prev,bcd_s_dez_prev,bcd_s_unid_prev);
`endif
	if (
		( bcd_h_dez_expected_prev[0] !== 1'bx ) && ( bcd_h_dez_prev[0] !== bcd_h_dez_expected_prev[0] )
		&& ((bcd_h_dez_expected_prev[0] !== last_bcd_h_dez_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd_h_dez[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd_h_dez_expected_prev);
		$display ("     Real value = %b", bcd_h_dez_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_bcd_h_dez_exp[0] = bcd_h_dez_expected_prev[0];
	end
	if (
		( bcd_h_dez_expected_prev[1] !== 1'bx ) && ( bcd_h_dez_prev[1] !== bcd_h_dez_expected_prev[1] )
		&& ((bcd_h_dez_expected_prev[1] !== last_bcd_h_dez_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd_h_dez[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd_h_dez_expected_prev);
		$display ("     Real value = %b", bcd_h_dez_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_bcd_h_dez_exp[1] = bcd_h_dez_expected_prev[1];
	end
	if (
		( bcd_h_dez_expected_prev[2] !== 1'bx ) && ( bcd_h_dez_prev[2] !== bcd_h_dez_expected_prev[2] )
		&& ((bcd_h_dez_expected_prev[2] !== last_bcd_h_dez_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd_h_dez[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd_h_dez_expected_prev);
		$display ("     Real value = %b", bcd_h_dez_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_bcd_h_dez_exp[2] = bcd_h_dez_expected_prev[2];
	end
	if (
		( bcd_h_dez_expected_prev[3] !== 1'bx ) && ( bcd_h_dez_prev[3] !== bcd_h_dez_expected_prev[3] )
		&& ((bcd_h_dez_expected_prev[3] !== last_bcd_h_dez_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd_h_dez[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd_h_dez_expected_prev);
		$display ("     Real value = %b", bcd_h_dez_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_bcd_h_dez_exp[3] = bcd_h_dez_expected_prev[3];
	end
	if (
		( bcd_h_dez_expected_prev[4] !== 1'bx ) && ( bcd_h_dez_prev[4] !== bcd_h_dez_expected_prev[4] )
		&& ((bcd_h_dez_expected_prev[4] !== last_bcd_h_dez_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd_h_dez[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd_h_dez_expected_prev);
		$display ("     Real value = %b", bcd_h_dez_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_bcd_h_dez_exp[4] = bcd_h_dez_expected_prev[4];
	end
	if (
		( bcd_h_dez_expected_prev[5] !== 1'bx ) && ( bcd_h_dez_prev[5] !== bcd_h_dez_expected_prev[5] )
		&& ((bcd_h_dez_expected_prev[5] !== last_bcd_h_dez_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd_h_dez[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd_h_dez_expected_prev);
		$display ("     Real value = %b", bcd_h_dez_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_bcd_h_dez_exp[5] = bcd_h_dez_expected_prev[5];
	end
	if (
		( bcd_h_dez_expected_prev[6] !== 1'bx ) && ( bcd_h_dez_prev[6] !== bcd_h_dez_expected_prev[6] )
		&& ((bcd_h_dez_expected_prev[6] !== last_bcd_h_dez_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd_h_dez[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd_h_dez_expected_prev);
		$display ("     Real value = %b", bcd_h_dez_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_bcd_h_dez_exp[6] = bcd_h_dez_expected_prev[6];
	end
	if (
		( bcd_h_unid_expected_prev[0] !== 1'bx ) && ( bcd_h_unid_prev[0] !== bcd_h_unid_expected_prev[0] )
		&& ((bcd_h_unid_expected_prev[0] !== last_bcd_h_unid_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd_h_unid[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd_h_unid_expected_prev);
		$display ("     Real value = %b", bcd_h_unid_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_bcd_h_unid_exp[0] = bcd_h_unid_expected_prev[0];
	end
	if (
		( bcd_h_unid_expected_prev[1] !== 1'bx ) && ( bcd_h_unid_prev[1] !== bcd_h_unid_expected_prev[1] )
		&& ((bcd_h_unid_expected_prev[1] !== last_bcd_h_unid_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd_h_unid[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd_h_unid_expected_prev);
		$display ("     Real value = %b", bcd_h_unid_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_bcd_h_unid_exp[1] = bcd_h_unid_expected_prev[1];
	end
	if (
		( bcd_h_unid_expected_prev[2] !== 1'bx ) && ( bcd_h_unid_prev[2] !== bcd_h_unid_expected_prev[2] )
		&& ((bcd_h_unid_expected_prev[2] !== last_bcd_h_unid_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd_h_unid[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd_h_unid_expected_prev);
		$display ("     Real value = %b", bcd_h_unid_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_bcd_h_unid_exp[2] = bcd_h_unid_expected_prev[2];
	end
	if (
		( bcd_h_unid_expected_prev[3] !== 1'bx ) && ( bcd_h_unid_prev[3] !== bcd_h_unid_expected_prev[3] )
		&& ((bcd_h_unid_expected_prev[3] !== last_bcd_h_unid_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd_h_unid[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd_h_unid_expected_prev);
		$display ("     Real value = %b", bcd_h_unid_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_bcd_h_unid_exp[3] = bcd_h_unid_expected_prev[3];
	end
	if (
		( bcd_h_unid_expected_prev[4] !== 1'bx ) && ( bcd_h_unid_prev[4] !== bcd_h_unid_expected_prev[4] )
		&& ((bcd_h_unid_expected_prev[4] !== last_bcd_h_unid_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd_h_unid[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd_h_unid_expected_prev);
		$display ("     Real value = %b", bcd_h_unid_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_bcd_h_unid_exp[4] = bcd_h_unid_expected_prev[4];
	end
	if (
		( bcd_h_unid_expected_prev[5] !== 1'bx ) && ( bcd_h_unid_prev[5] !== bcd_h_unid_expected_prev[5] )
		&& ((bcd_h_unid_expected_prev[5] !== last_bcd_h_unid_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd_h_unid[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd_h_unid_expected_prev);
		$display ("     Real value = %b", bcd_h_unid_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_bcd_h_unid_exp[5] = bcd_h_unid_expected_prev[5];
	end
	if (
		( bcd_h_unid_expected_prev[6] !== 1'bx ) && ( bcd_h_unid_prev[6] !== bcd_h_unid_expected_prev[6] )
		&& ((bcd_h_unid_expected_prev[6] !== last_bcd_h_unid_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd_h_unid[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd_h_unid_expected_prev);
		$display ("     Real value = %b", bcd_h_unid_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_bcd_h_unid_exp[6] = bcd_h_unid_expected_prev[6];
	end
	if (
		( bcd_m_dez_expected_prev[0] !== 1'bx ) && ( bcd_m_dez_prev[0] !== bcd_m_dez_expected_prev[0] )
		&& ((bcd_m_dez_expected_prev[0] !== last_bcd_m_dez_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd_m_dez[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd_m_dez_expected_prev);
		$display ("     Real value = %b", bcd_m_dez_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_bcd_m_dez_exp[0] = bcd_m_dez_expected_prev[0];
	end
	if (
		( bcd_m_dez_expected_prev[1] !== 1'bx ) && ( bcd_m_dez_prev[1] !== bcd_m_dez_expected_prev[1] )
		&& ((bcd_m_dez_expected_prev[1] !== last_bcd_m_dez_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd_m_dez[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd_m_dez_expected_prev);
		$display ("     Real value = %b", bcd_m_dez_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_bcd_m_dez_exp[1] = bcd_m_dez_expected_prev[1];
	end
	if (
		( bcd_m_dez_expected_prev[2] !== 1'bx ) && ( bcd_m_dez_prev[2] !== bcd_m_dez_expected_prev[2] )
		&& ((bcd_m_dez_expected_prev[2] !== last_bcd_m_dez_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd_m_dez[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd_m_dez_expected_prev);
		$display ("     Real value = %b", bcd_m_dez_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_bcd_m_dez_exp[2] = bcd_m_dez_expected_prev[2];
	end
	if (
		( bcd_m_dez_expected_prev[3] !== 1'bx ) && ( bcd_m_dez_prev[3] !== bcd_m_dez_expected_prev[3] )
		&& ((bcd_m_dez_expected_prev[3] !== last_bcd_m_dez_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd_m_dez[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd_m_dez_expected_prev);
		$display ("     Real value = %b", bcd_m_dez_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_bcd_m_dez_exp[3] = bcd_m_dez_expected_prev[3];
	end
	if (
		( bcd_m_dez_expected_prev[4] !== 1'bx ) && ( bcd_m_dez_prev[4] !== bcd_m_dez_expected_prev[4] )
		&& ((bcd_m_dez_expected_prev[4] !== last_bcd_m_dez_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd_m_dez[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd_m_dez_expected_prev);
		$display ("     Real value = %b", bcd_m_dez_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_bcd_m_dez_exp[4] = bcd_m_dez_expected_prev[4];
	end
	if (
		( bcd_m_dez_expected_prev[5] !== 1'bx ) && ( bcd_m_dez_prev[5] !== bcd_m_dez_expected_prev[5] )
		&& ((bcd_m_dez_expected_prev[5] !== last_bcd_m_dez_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd_m_dez[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd_m_dez_expected_prev);
		$display ("     Real value = %b", bcd_m_dez_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_bcd_m_dez_exp[5] = bcd_m_dez_expected_prev[5];
	end
	if (
		( bcd_m_dez_expected_prev[6] !== 1'bx ) && ( bcd_m_dez_prev[6] !== bcd_m_dez_expected_prev[6] )
		&& ((bcd_m_dez_expected_prev[6] !== last_bcd_m_dez_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd_m_dez[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd_m_dez_expected_prev);
		$display ("     Real value = %b", bcd_m_dez_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_bcd_m_dez_exp[6] = bcd_m_dez_expected_prev[6];
	end
	if (
		( bcd_m_unid_expected_prev[0] !== 1'bx ) && ( bcd_m_unid_prev[0] !== bcd_m_unid_expected_prev[0] )
		&& ((bcd_m_unid_expected_prev[0] !== last_bcd_m_unid_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd_m_unid[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd_m_unid_expected_prev);
		$display ("     Real value = %b", bcd_m_unid_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_bcd_m_unid_exp[0] = bcd_m_unid_expected_prev[0];
	end
	if (
		( bcd_m_unid_expected_prev[1] !== 1'bx ) && ( bcd_m_unid_prev[1] !== bcd_m_unid_expected_prev[1] )
		&& ((bcd_m_unid_expected_prev[1] !== last_bcd_m_unid_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd_m_unid[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd_m_unid_expected_prev);
		$display ("     Real value = %b", bcd_m_unid_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_bcd_m_unid_exp[1] = bcd_m_unid_expected_prev[1];
	end
	if (
		( bcd_m_unid_expected_prev[2] !== 1'bx ) && ( bcd_m_unid_prev[2] !== bcd_m_unid_expected_prev[2] )
		&& ((bcd_m_unid_expected_prev[2] !== last_bcd_m_unid_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd_m_unid[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd_m_unid_expected_prev);
		$display ("     Real value = %b", bcd_m_unid_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_bcd_m_unid_exp[2] = bcd_m_unid_expected_prev[2];
	end
	if (
		( bcd_m_unid_expected_prev[3] !== 1'bx ) && ( bcd_m_unid_prev[3] !== bcd_m_unid_expected_prev[3] )
		&& ((bcd_m_unid_expected_prev[3] !== last_bcd_m_unid_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd_m_unid[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd_m_unid_expected_prev);
		$display ("     Real value = %b", bcd_m_unid_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_bcd_m_unid_exp[3] = bcd_m_unid_expected_prev[3];
	end
	if (
		( bcd_m_unid_expected_prev[4] !== 1'bx ) && ( bcd_m_unid_prev[4] !== bcd_m_unid_expected_prev[4] )
		&& ((bcd_m_unid_expected_prev[4] !== last_bcd_m_unid_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd_m_unid[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd_m_unid_expected_prev);
		$display ("     Real value = %b", bcd_m_unid_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_bcd_m_unid_exp[4] = bcd_m_unid_expected_prev[4];
	end
	if (
		( bcd_m_unid_expected_prev[5] !== 1'bx ) && ( bcd_m_unid_prev[5] !== bcd_m_unid_expected_prev[5] )
		&& ((bcd_m_unid_expected_prev[5] !== last_bcd_m_unid_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd_m_unid[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd_m_unid_expected_prev);
		$display ("     Real value = %b", bcd_m_unid_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_bcd_m_unid_exp[5] = bcd_m_unid_expected_prev[5];
	end
	if (
		( bcd_m_unid_expected_prev[6] !== 1'bx ) && ( bcd_m_unid_prev[6] !== bcd_m_unid_expected_prev[6] )
		&& ((bcd_m_unid_expected_prev[6] !== last_bcd_m_unid_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd_m_unid[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd_m_unid_expected_prev);
		$display ("     Real value = %b", bcd_m_unid_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_bcd_m_unid_exp[6] = bcd_m_unid_expected_prev[6];
	end
	if (
		( bcd_s_dez_expected_prev[0] !== 1'bx ) && ( bcd_s_dez_prev[0] !== bcd_s_dez_expected_prev[0] )
		&& ((bcd_s_dez_expected_prev[0] !== last_bcd_s_dez_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd_s_dez[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd_s_dez_expected_prev);
		$display ("     Real value = %b", bcd_s_dez_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_bcd_s_dez_exp[0] = bcd_s_dez_expected_prev[0];
	end
	if (
		( bcd_s_dez_expected_prev[1] !== 1'bx ) && ( bcd_s_dez_prev[1] !== bcd_s_dez_expected_prev[1] )
		&& ((bcd_s_dez_expected_prev[1] !== last_bcd_s_dez_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd_s_dez[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd_s_dez_expected_prev);
		$display ("     Real value = %b", bcd_s_dez_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_bcd_s_dez_exp[1] = bcd_s_dez_expected_prev[1];
	end
	if (
		( bcd_s_dez_expected_prev[2] !== 1'bx ) && ( bcd_s_dez_prev[2] !== bcd_s_dez_expected_prev[2] )
		&& ((bcd_s_dez_expected_prev[2] !== last_bcd_s_dez_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd_s_dez[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd_s_dez_expected_prev);
		$display ("     Real value = %b", bcd_s_dez_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_bcd_s_dez_exp[2] = bcd_s_dez_expected_prev[2];
	end
	if (
		( bcd_s_dez_expected_prev[3] !== 1'bx ) && ( bcd_s_dez_prev[3] !== bcd_s_dez_expected_prev[3] )
		&& ((bcd_s_dez_expected_prev[3] !== last_bcd_s_dez_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd_s_dez[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd_s_dez_expected_prev);
		$display ("     Real value = %b", bcd_s_dez_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_bcd_s_dez_exp[3] = bcd_s_dez_expected_prev[3];
	end
	if (
		( bcd_s_dez_expected_prev[4] !== 1'bx ) && ( bcd_s_dez_prev[4] !== bcd_s_dez_expected_prev[4] )
		&& ((bcd_s_dez_expected_prev[4] !== last_bcd_s_dez_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd_s_dez[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd_s_dez_expected_prev);
		$display ("     Real value = %b", bcd_s_dez_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_bcd_s_dez_exp[4] = bcd_s_dez_expected_prev[4];
	end
	if (
		( bcd_s_dez_expected_prev[5] !== 1'bx ) && ( bcd_s_dez_prev[5] !== bcd_s_dez_expected_prev[5] )
		&& ((bcd_s_dez_expected_prev[5] !== last_bcd_s_dez_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd_s_dez[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd_s_dez_expected_prev);
		$display ("     Real value = %b", bcd_s_dez_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_bcd_s_dez_exp[5] = bcd_s_dez_expected_prev[5];
	end
	if (
		( bcd_s_dez_expected_prev[6] !== 1'bx ) && ( bcd_s_dez_prev[6] !== bcd_s_dez_expected_prev[6] )
		&& ((bcd_s_dez_expected_prev[6] !== last_bcd_s_dez_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd_s_dez[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd_s_dez_expected_prev);
		$display ("     Real value = %b", bcd_s_dez_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_bcd_s_dez_exp[6] = bcd_s_dez_expected_prev[6];
	end
	if (
		( bcd_s_unid_expected_prev[0] !== 1'bx ) && ( bcd_s_unid_prev[0] !== bcd_s_unid_expected_prev[0] )
		&& ((bcd_s_unid_expected_prev[0] !== last_bcd_s_unid_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd_s_unid[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd_s_unid_expected_prev);
		$display ("     Real value = %b", bcd_s_unid_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_bcd_s_unid_exp[0] = bcd_s_unid_expected_prev[0];
	end
	if (
		( bcd_s_unid_expected_prev[1] !== 1'bx ) && ( bcd_s_unid_prev[1] !== bcd_s_unid_expected_prev[1] )
		&& ((bcd_s_unid_expected_prev[1] !== last_bcd_s_unid_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd_s_unid[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd_s_unid_expected_prev);
		$display ("     Real value = %b", bcd_s_unid_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_bcd_s_unid_exp[1] = bcd_s_unid_expected_prev[1];
	end
	if (
		( bcd_s_unid_expected_prev[2] !== 1'bx ) && ( bcd_s_unid_prev[2] !== bcd_s_unid_expected_prev[2] )
		&& ((bcd_s_unid_expected_prev[2] !== last_bcd_s_unid_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd_s_unid[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd_s_unid_expected_prev);
		$display ("     Real value = %b", bcd_s_unid_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_bcd_s_unid_exp[2] = bcd_s_unid_expected_prev[2];
	end
	if (
		( bcd_s_unid_expected_prev[3] !== 1'bx ) && ( bcd_s_unid_prev[3] !== bcd_s_unid_expected_prev[3] )
		&& ((bcd_s_unid_expected_prev[3] !== last_bcd_s_unid_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd_s_unid[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd_s_unid_expected_prev);
		$display ("     Real value = %b", bcd_s_unid_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_bcd_s_unid_exp[3] = bcd_s_unid_expected_prev[3];
	end
	if (
		( bcd_s_unid_expected_prev[4] !== 1'bx ) && ( bcd_s_unid_prev[4] !== bcd_s_unid_expected_prev[4] )
		&& ((bcd_s_unid_expected_prev[4] !== last_bcd_s_unid_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd_s_unid[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd_s_unid_expected_prev);
		$display ("     Real value = %b", bcd_s_unid_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_bcd_s_unid_exp[4] = bcd_s_unid_expected_prev[4];
	end
	if (
		( bcd_s_unid_expected_prev[5] !== 1'bx ) && ( bcd_s_unid_prev[5] !== bcd_s_unid_expected_prev[5] )
		&& ((bcd_s_unid_expected_prev[5] !== last_bcd_s_unid_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd_s_unid[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd_s_unid_expected_prev);
		$display ("     Real value = %b", bcd_s_unid_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_bcd_s_unid_exp[5] = bcd_s_unid_expected_prev[5];
	end
	if (
		( bcd_s_unid_expected_prev[6] !== 1'bx ) && ( bcd_s_unid_prev[6] !== bcd_s_unid_expected_prev[6] )
		&& ((bcd_s_unid_expected_prev[6] !== last_bcd_s_unid_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd_s_unid[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd_s_unid_expected_prev);
		$display ("     Real value = %b", bcd_s_unid_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_bcd_s_unid_exp[6] = bcd_s_unid_expected_prev[6];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module relogio_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg rst;
// wires                                               
wire [6:0] bcd_h_dez;
wire [6:0] bcd_h_unid;
wire [6:0] bcd_m_dez;
wire [6:0] bcd_m_unid;
wire [6:0] bcd_s_dez;
wire [6:0] bcd_s_unid;

wire sampler;                             

// assign statements (if any)                          
relogio i1 (
// port map - connection between master ports and signals/registers   
	.bcd_h_dez(bcd_h_dez),
	.bcd_h_unid(bcd_h_unid),
	.bcd_m_dez(bcd_m_dez),
	.bcd_m_unid(bcd_m_unid),
	.bcd_s_dez(bcd_s_dez),
	.bcd_s_unid(bcd_s_unid),
	.clk(clk),
	.rst(rst)
);

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// rst
initial
begin
	rst = 1'b0;
	rst = #50000 1'b1;
end 

relogio_vlg_sample_tst tb_sample (
	.clk(clk),
	.rst(rst),
	.sampler_tx(sampler)
);

relogio_vlg_check_tst tb_out(
	.bcd_h_dez(bcd_h_dez),
	.bcd_h_unid(bcd_h_unid),
	.bcd_m_dez(bcd_m_dez),
	.bcd_m_unid(bcd_m_unid),
	.bcd_s_dez(bcd_s_dez),
	.bcd_s_unid(bcd_s_unid),
	.sampler_rx(sampler)
);
endmodule

